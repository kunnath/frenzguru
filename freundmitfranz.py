import streamlit as st
import ollama
from datetime import datetime, timedelta
import random
import pandas as pd
import numpy as np
    
# App configuration
st.set_page_config(
    page_title="B1 Pr√ºfung Blitzvorbereitung",
    page_icon="üá©üá™",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .teil-card {
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        transition: transform 0.2s;
    }
    .teil-card:hover {
        transform: translateY(-2px);
    }
    .vocab-card {
        border-left: 4px solid #1a73e8;
        padding: 1rem;
        margin-bottom: 1rem;
        background-color: #f8f9fa;
    }
    .time-slot {
        background-color: #f0f7ff;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
    .exercise-card {
        background-color: #fff8e6;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
    }
    .verb-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1rem 0;
    }
    .verb-table th, .verb-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    .verb-table tr:nth-child(even) {
        background-color: #f2f2f2;
    }
</style>
""", unsafe_allow_html=True)

# Data for the app
vocab_data = {
    "Wichtige Pr√§positionen (mit F√§llen)": {
        "wegen": "wegen + Genitiv (because of) - Wegen des Wetters...",
        "trotz": "trotz + Genitiv (despite) - Trotz der K√§lte...",
        "w√§hrend": "w√§hrend + Genitiv (during) - W√§hrend des Kurses...",
        "gegen√ºber": "gegen√ºber + Dativ (opposite) - Gegen√ºber dem Bahnhof...",
        "bis": "bis + Akkusativ (until) - Bis n√§chsten Montag...",
        "durch": "durch + Akkusativ (through) - Durch den Park...",
        "f√ºr": "f√ºr + Akkusativ (for) - F√ºr meine Pr√ºfung...",
        "ohne": "ohne + Akkusativ (without) - Ohne mein Buch..."
    },
    "Essentielle Verben": {
        "sich bewerben um": "to apply for (Bewirbst du dich um die Stelle?)",
        "erledigen": "to complete (Ich erledige meine Hausaufgaben)",
        "verschieben": "to postpone (Wir verschieben den Termin)",
        "verstehen": "to understand (Verstehst du die Frage?)",
        "mitteilen": "to inform (Teilen Sie mir bitte mit...)",
        "sich erkundigen nach": "to inquire about (Ich erkundige mich nach dem Kurs)",
        "zustimmen": "to agree (Stimmst du mir zu?)",
        "ablehnen": "to refuse (Sie lehnte die Einladung ab)"
    },
    "Zeitformen (Verb Tenses)": {
        "Pr√§sens": "Ich lerne Deutsch (I learn/am learning German)",
        "Perfekt": "Ich habe gelernt (I learned/have learned)",
        "Pr√§teritum": "Ich lernte Deutsch (I learned German) - mostly written",
        "Plusquamperfekt": "Ich hatte gelernt (I had learned)",
        "Futur I": "Ich werde lernen (I will learn)",
        "Futur II": "Ich werde gelernt haben (I will have learned)"
    },
    "Konjunktionen (Conjunctions)": {
        "weil": "because (Hauptsatz + Nebensatz) - Ich bleibe zu Hause, weil ich krank bin.",
        "denn": "because (Hauptsatz + Hauptsatz) - Ich bleibe zu Hause, denn ich bin krank.",
        "obwohl": "although - Obwohl es regnet, gehe ich spazieren.",
        "damit": "so that - Ich lerne viel, damit ich die Pr√ºfung bestehe.",
        "wenn": "if/when - Wenn ich Zeit habe, lese ich ein Buch.",
        "als": "when (past) - Als ich jung war, spielte ich Fu√üball.",
        "w√§hrend": "while - W√§hrend ich koche, h√∂re ich Musik.",
        "nachdem": "after - Nachdem ich gegessen habe, trinke ich Kaffee."
    },
    "Weil vs. Denn": {
        "Position": "WEIL: Verb at end | DENN: Normal word order",
        "Example 1": "WEIL: Ich bin m√ºde, weil ich sp√§t ins Bett gegangen bin.",
        "Example 2": "DENN: Ich bin m√ºde, denn ich bin sp√§t ins Bett gegangen.",
        "Comma": "Both ALWAYS need a comma before them",
        "Usage": "DENN is more formal, WEIL is more common"
    },
    "√úbergangsw√∂rter (Transition Words)": {
        "zuerst": "first - Zuerst lese ich die Anleitung.",
        "dann": "then - Dann beginne ich mit der Aufgabe.",
        "anschlie√üend": "afterwards - Anschlie√üend √ºberpr√ºfe ich die Antworten.",
        "schlie√ülich": "finally - Schlie√ülich gebe ich den Test ab.",
        "deshalb": "therefore - Ich bin krank, deshalb bleibe ich im Bett.",
        "trotzdem": "nevertheless - Es regnet, trotzdem gehe ich spazieren."
    },
    "Pr√ºfungsschl√ºsselw√∂rter": {
        "die Aufgabe": "task/question - Lesen Sie die Aufgabe genau!",
        "die L√∂sung": "solution - Die L√∂sung steht auf Seite 10.",
        "die Note": "grade - Ich habe eine gute Note bekommen.",
        "bestehen": "to pass - Ich m√∂chte die Pr√ºfung bestehen.",
        "durchfallen": "to fail - Leider ist er durchgefallen.",
        "der Fehler": "mistake - Korrigieren Sie die Fehler."
    }
}

writing_templates = {
    "Formal Letter": {
        "structure": [
            "Ort, Datum (right aligned)",
            "Betreff: (subject line)",
            "Sehr geehrte Damen und Herren,",
            "Einleitung: State reason for writing",
            "Hauptteil: Provide details, ask questions",
            "Schluss: Request response, thank reader",
            "Mit freundlichen Gr√º√üen,",
            "Ihr Name"
        ],
        "example": """
M√ºnchen, 15. M√§rz 2024

Betreff: Bewerbung f√ºr Praktikumsstelle

Sehr geehrte Damen und Herren,

mit gro√üem Interesse habe ich Ihre Anzeige f√ºr ein Praktikum gelesen. 
Ich m√∂chte mich f√ºr diese Stelle bewerben.

Ich studiere derzeit Wirtschaft an der Universit√§t M√ºnchen und 
suche ein Praktikum im Bereich Marketing. In meinem Studium habe ich 
schon mehrere Kurse in diesem Bereich belegt.

√úber eine positive R√ºckmeldung w√ºrde ich mich sehr freuen. 
F√ºr weitere Informationen stehe ich gerne zur Verf√ºgung.

Mit freundlichen Gr√º√üen,
Anna M√ºller
"""
    },
    "Informal Email": {
        "structure": [
            "Betreff: (subject line)",
            "Liebe/Lieber [Name],",
            "Einleitung: Greeting, reason for writing",
            "Hauptteil: Share news, ask questions",
            "Schluss: Closing remarks",
            "Viele Gr√º√üe,",
            "Dein Name"
        ],
        "example": """
Betreff: Treffen am Wochenende

Liebe Sarah,

wie geht's dir? Ich hoffe, alles ist gut bei dir.

Ich schreibe dir, weil ich wissen wollte, ob du am Samstag Zeit hast. 
Ich m√∂chte mit dir ins Kino gehen. Der neue Marvel-Film l√§uft jetzt.

Was h√§ltst du davon? Lass mich bitte wissen, ob du kommen kannst.

Viele Gr√º√üe,
Deine Lisa
"""
    }
}

exam_info = {
    "Passing Requirements": {
        "description": "To pass the Goethe-Zertifikat B1 exam, you must:",
        "requirements": [
            "Score at least 60% overall (180 points)",
            "Score at least 60% in each module (Reading, Writing, Listening, Speaking)"
        ]
    },
    "Exam Structure": {
        "Lesen": "65 Minuten - 5 Teile",
        "Schreiben": "60 Minuten - 2 Aufgaben",
        "H√∂ren": "40 Minuten - 4 Teile",
        "Sprechen": "15 Minuten - 3 Teile (mit Partner)"
    }
}

exercises = {
    "Lesen": [
        {"question": "Lesen Sie den Text und beantworten Sie die Fragen:", "text": """
In Deutschland gibt es vier Jahreszeiten: Fr√ºhling, Sommer, Herbst und Winter. 
Der Fr√ºhling beginnt im M√§rz und endet im Mai. Viele Menschen freuen sich auf 
den Fr√ºhling, weil die Tage l√§nger werden und die Blumen bl√ºhen. Im Sommer 
gehen viele Deutsche in den Urlaub, besonders an die Nordsee oder Ostsee.
"""},
        {"question": "Welche Aussage passt zu welchem Abschnitt?", "text": """
1. Verkehrsmittel: In deutschen St√§dten gibt es Busse, Bahnen und U-Bahnen. 
2. Freizeitaktivit√§ten: Viele Deutsche treiben Sport oder gehen wandern.
"""}
    ],
    "Schreiben": [
        {"task": "Schreiben Sie eine formelle Email an eine Sprachschule (80-100 W√∂rter)", "hints": """
- Fragen Sie nach einem Deutschkurs
- Geben Sie Ihr Sprachniveau an
- Fragen Sie nach dem Preis und dem Startdatum
"""},
        {"task": "Schreiben Sie einen Brief an einen Freund √ºber Ihren letzten Urlaub", "hints": """
- Wohin sind Sie gefahren?
- Was haben Sie gemacht?
- Wie war das Wetter?
- Wollen Sie wieder dorthin fahren?
"""}
    ],
    "H√∂ren": [
        {"task": "H√∂ren Sie die Durchsage und beantworten Sie die Fragen:", "questions": """
1. Wann f√§hrt der n√§chste Zug nach Berlin?
2. Von welchem Gleis f√§hrt der Zug?
"""},
        {"task": "Welche Antwort passt zu welchem Dialog?", "options": """
A) "Entschuldigung, wo ist die Post?" 
B) "Ich m√∂chte ein Ticket nach Hamburg kaufen"
"""}
    ],
    "Sprechen": [
        {"task": "Stellen Sie sich vor:", "prompts": """
- Name, Alter
- Hobbys
- Beruf/Studium
- Warum lernen Sie Deutsch?
"""},
        {"task": "Diskutieren Sie mit einem Partner:", "topics": """
- Vor- und Nachteile des Lebens in der Stadt
- Wie verbringen junge Leute ihre Freizeit?
"""}
    ]
}

# Ollama/DeepSeek integration
def get_ai_response(question):
    """Get response from DeepSeek R1 via Ollama"""
    try:
        response = ollama.generate(
            model='deepseek-r1',
            prompt=f"""Du bist ein B1-Pr√ºfungsexperte. Beantworte die Frage kurz und pr√§zise:
            
            Frage: {question}
            
            - Maximal 3 S√§tze
            - Fokus auf Pr√ºfungsstrategien
            - Wichtige Grammatikpunkte
            - Typische Fehler vermeiden""",
            options={'temperature': 0.3}
        )
        return response['response']
    except Exception as e:
        st.error(f"Fehler bei der AI-Anfrage: {e}")
        return None

# Main app
def main():
    st.title("üá©üá™ B1 Pr√ºfung Blitzvorbereitung")
    st.subheader("Intensivkurs f√ºr die Goethe B1 Pr√ºfung")
    
    # Navigation
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["√úbersicht", "Wortschatz", "Schreiben", "Pr√ºfungsinfo", "√úbungen"])
    
    with tab1:
        st.header("2-Tage-Lernplan")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("### **Tag 1: Grundlagen**")
            st.markdown("""
            - ‚è∞ 2h - Wichtiger Wortschatz & Pr√§positionen
            - ‚è∞ 1.5h - Leseverstehen Strategien
            - ‚è∞ 2h - Schreiben Vorlagen
            - ‚è∞ 1h - H√∂rverstehen Praxis
            """)
        with col2:
            st.markdown("### **Tag 2: Pr√ºfungssimulation**")
            st.markdown("""
            - ‚è∞ 3h - Komplette √úbungspr√ºfung
            - ‚è∞ 1h - Sprechen √ºben
            - ‚è∞ 1h - Schwachstellen wiederholen
            """)
        
        st.header("Pr√ºfungsteile")
        cols = st.columns(4)
        teile = ["Lesen", "Schreiben", "H√∂ren", "Sprechen"]
        for i, col in enumerate(cols):
            with col:
                st.markdown(f"""
                <div class="teil-card">
                    <h3>Teil {i+1}: {teile[i]}</h3>
                    <p>{exam_info['Exam Structure'][teile[i]]}</p>
                </div>
                """, unsafe_allow_html=True)
    
    with tab2:
        st.header("Wichtiger Wortschatz")
        
        for category, items in vocab_data.items():
            with st.expander(f"üìå {category}"):
                col1, col2 = st.columns(2)
                items_list = list(items.items())
                
                for i, (word, meaning) in enumerate(items_list):
                    if i % 2 == 0:
                        col1.markdown(f"**{word}**  \n{meaning}")
                    else:
                        col2.markdown(f"**{word}**  \n{meaning}")
        
        st.markdown("---")
        with st.expander("üìù Verbkonjugation (Beispiele)"):
            st.markdown("""
            <table class="verb-table">
                <tr><th>Pronomen</th><th>lernen (Pr√§sens)</th><th>gelernt (Perfekt)</th><th>lernen (Futur I)</th></tr>
                <tr><td>ich</td><td>lerne</td><td>habe gelernt</td><td>werde lernen</td></tr>
                <tr><td>du</td><td>lernst</td><td>hast gelernt</td><td>wirst lernen</td></tr>
                <tr><td>er/sie/es</td><td>lernt</td><td>hat gelernt</td><td>wird lernen</td></tr>
                <tr><td>wir</td><td>lernen</td><td>haben gelernt</td><td>werden lernen</td></tr>
                <tr><td>ihr</td><td>lernt</td><td>habt gelernt</td><td>werdet lernen</td></tr>
                <tr><td>sie/Sie</td><td>lernen</td><td>haben gelernt</td><td>werden lernen</td></tr>
            </table>
            """, unsafe_allow_html=True)
        
        with st.expander("‚úçÔ∏è Weil/Denn √úbung"):
            st.markdown("**Erg√§nzen Sie mit 'weil' oder 'denn':**")
            exercise1 = st.text_input("1. Ich nehme einen Regenschirm, ___ es regnet.")
            exercise2 = st.text_input("2. Sie geht fr√ºh ins Bett, ___ sie m√ºde ist.")
            
            if st.button("Antworten √ºberpr√ºfen"):
                answers = {
                    1: {"correct": "weil", "explanation": "Verb 'regnet' am Ende ‚Üí Nebensatz"},
                    2: {"correct": "denn", "explanation": "'ist' vor dem Subjekt ‚Üí Hauptsatz"}
                }
                for i, ans in enumerate([exercise1, exercise2], 1):
                    if ans.lower() == answers[i]["correct"]:
                        st.success(f"Richtig! {answers[i]['explanation']}")
                    else:
                        st.error(f"Falsch! Richtige Antwort: {answers[i]['correct']}")
    
    with tab3:
        st.header("Schreiben Vorlagen")
        template_type = st.radio("Vorlage ausw√§hlen:", list(writing_templates.keys()))
        
        st.markdown("### Struktur:")
        for item in writing_templates[template_type]["structure"]:
            st.markdown(f"- {item}")
        
        st.markdown("### Beispiel:")
        st.text_area("Mustertext:", 
                    writing_templates[template_type]["example"], 
                    height=200,
                    disabled=True)
        
        st.markdown("### Tipps f√ºr das Schreiben")
        st.markdown("""
        1. Struktur immer einhalten (Anrede, Einleitung, Hauptteil, Schluss)
        2. Mindestens 100 W√∂rter schreiben
        3. Auf Formal/Informal achten
        4. 5 Minuten f√ºr Planung verwenden
        5. 10 Minuten f√ºr Korrektur am Ende
        """)
    
    with tab4:
        st.header("Pr√ºfungsinformationen")
        
        with st.expander("Bestandenkriterien"):
            st.markdown(exam_info["Passing Requirements"]["description"])
            for req in exam_info["Passing Requirements"]["requirements"]:
                st.markdown(f"- {req}")
        
        with st.expander("Pr√ºfungsstruktur"):
            for part, info in exam_info["Exam Structure"].items():
                st.markdown(f"**{part}**: {info}")
        
        with st.expander("Bewertungskriterien"):
            st.table(pd.DataFrame({
                "Teil": ["Lesen", "Schreiben", "H√∂ren", "Sprechen"],
                "Punkte": [100, 100, 100, 100],
                "Bestanden": [60, 60, 60, 60],
                "Zeit": ["65 min", "60 min", "40 min", "15 min"]
            }))
    
    with tab5:
        st.header("√úbungen")
        selected_part = st.radio(
            "W√§hle einen Pr√ºfungsteil:",
            ["Lesen", "Schreiben", "H√∂ren", "Sprechen"],
            horizontal=True
        )
        
        st.markdown(f"### {selected_part} √úbung")
        exercise = random.choice(exercises[selected_part])
        
        with st.container():
            st.markdown('<div class="exercise-card">', unsafe_allow_html=True)
            
            if selected_part == "Lesen":
                st.markdown(f"**{exercise['question']}**")
                st.markdown(f"*{exercise['text']}*")
                st.text_area("Deine Antwort:", height=150, key="reading_answer")
            
            elif selected_part == "Schreiben":
                st.markdown(f"**Aufgabe:** {exercise['task']}")
                st.markdown(f"*Hinweise:* {exercise['hints']}")
                user_text = st.text_area("Deine Antwort:", height=200, key="writing_answer")
                if st.button("Feedback erhalten"):
                    feedback = get_ai_response(f"Gib kurzes Feedback zu diesem B1-Text: {user_text}")
                    if feedback:
                        st.info(feedback)
            
            elif selected_part == "H√∂ren":
                st.markdown(f"**{exercise['task']}**")
                st.audio("https://www.goethe.de/pro/relaunch/prf/de/GOETHE-ZERTIFIKAT_B1_HOEREN.mp3")
                if "questions" in exercise:
                    st.markdown(f"*Fragen:* {exercise['questions']}")
                else:
                    st.markdown(f"*Optionen:* {exercise['options']}")
                st.text_input("Deine Antwort:", key="listening_answer")
            
            elif selected_part == "Sprechen":
                st.markdown(f"**{exercise['task']}**")
                st.markdown(f"*Themen:* {exercise['prompts'] if 'prompts' in exercise else exercise['topics']}")
                st.text_input("Deine Stichpunkte:", key="speaking_notes")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown("---")
        st.markdown("### ü§ñ Frag den B1-Experten")
        user_question = st.text_input("Stelle eine Frage zur Pr√ºfung:")
        
        if user_question:
            with st.spinner("AI analysiert..."):
                answer = get_ai_response(user_question)
                if answer:
                    st.success(answer)
                    st.markdown("---")
                    st.markdown("**üîç Weiterf√ºhrende √úbungen:**")
                    if "h√∂ren" in user_question.lower():
                        st.markdown("- [H√∂rverstehen √úbung 1](#)")
                        st.markdown("- [Dialoge verstehen](#)")
                    elif "schreiben" in user_question.lower():
                        st.markdown("- [Formeller Brief √ºben](#)")
                        st.markdown("- [E-Mail an Freund schreiben](#)")

if __name__ == "__main__":
    main()